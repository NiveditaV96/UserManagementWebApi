<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Autofac.Extras.NSubstitute</name>
    </assembly>
    <members>
        <member name="T:Autofac.Extras.NSubstitute.AutoSubstitute">
            <summary>
            Wrapper around <see cref="N:Autofac"/> and <see cref="N:Autofac.Extras.NSubstitute"/>
            </summary>
        </member>
        <member name="M:Autofac.Extras.NSubstitute.AutoSubstitute.#ctor(Autofac.ContainerBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extras.NSubstitute.AutoSubstitute" /> class.
            </summary>
            <param name="builder">The container builder to use to build the container.</param>
        </member>
        <member name="M:Autofac.Extras.NSubstitute.AutoSubstitute.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Autofac.Extras.NSubstitute.AutoSubstitute"/> class.
            </summary>
        </member>
        <member name="P:Autofac.Extras.NSubstitute.AutoSubstitute.Container">
            <summary>
            Gets the <see cref="T:Autofac.IContainer"/> that handles the component resolution.
            </summary>
        </member>
        <member name="M:Autofac.Extras.NSubstitute.AutoSubstitute.Dispose">
            <summary>
            Disposes internal container.
            </summary>
        </member>
        <member name="M:Autofac.Extras.NSubstitute.AutoSubstitute.Resolve``1(Autofac.Core.Parameter[])">
            <summary>
            Resolve the specified type in the container (register it if needed)
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
            <param name="parameters">Optional parameters</param>
            <returns>The service.</returns>
        </member>
        <member name="M:Autofac.Extras.NSubstitute.AutoSubstitute.Provide``2(Autofac.Core.Parameter[])">
            <summary>
            Resolve the specified type in the container (register it if needed)
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The implementation of the service.</typeparam>
            <param name="parameters">Optional parameters</param>
            <returns>The service.</returns>
        </member>
        <member name="M:Autofac.Extras.NSubstitute.AutoSubstitute.Provide``1(``0)">
            <summary>
            Resolve the specified type in the container (register specified instance if needed)
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="instance">The instance to register if needed.</param>
            <returns>The instance resolved from container.</returns>
        </member>
        <member name="M:Autofac.Extras.NSubstitute.AutoSubstitute.ProvidePartsOf``2(Autofac.Core.Parameter[])">
            <summary>
            Resolve the specified type's partial subs in the container (register it if needed)
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The implementation of the service.</typeparam>
            <param name="parameters">Optional parameters</param>
            <returns>The service's partial substitute.</returns>
        </member>
        <member name="M:Autofac.Extras.NSubstitute.AutoSubstitute.Dispose(System.Boolean)">
            <summary>
            Handles disposal of managed and unmanaged resources.
            </summary>
            <param name="disposing">
            <see langword="true" /> to dispose of managed resources (during a manual execution
            of <see cref="M:Autofac.Extras.NSubstitute.AutoSubstitute.Dispose"/>); or
            <see langword="false" /> if this is getting run as part of finalization where
            managed resources may have already been cleaned up.
            </param>
        </member>
        <member name="T:Autofac.Extras.NSubstitute.SubstituteRegistrationHandler">
            <summary>
            Resolves unknown interfaces and Fakes.
            </summary>
        </member>
        <member name="P:Autofac.Extras.NSubstitute.SubstituteRegistrationHandler.IsAdapterForIndividualComponents">
            <summary>
            Gets a value indicating whether the registrations provided by this source are 1:1 adapters on top
            of other components (I.e. like Meta, Func or Owned.)
            </summary>
        </member>
        <member name="M:Autofac.Extras.NSubstitute.SubstituteRegistrationHandler.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
        </member>
    </members>
</doc>
